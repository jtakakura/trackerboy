#!/usr/bin/env python3
#
# File: genstep.py
#
# Author: stoneface
#
# Usage: genstep.py <sampling_rate> <lowest_frequency> <phases> <setwidth>
#
# Generates sets of a bandlimited steps outputted as a 2D C float array
#

import math
import sys
import ctypes


def sinc(angle):
    if angle == 0:
        return 1
    else:
        piangle = math.pi * angle
        return math.sin(piangle) / piangle


def stepset(samplingRate, frequency, phase, width):
    
    sset = []
    
    # find the largest harmonic that is <= the nyquist frequency
    harmonics = math.floor(samplingRate / (2 * frequency))
    
    # 0.777 is the amplitude of that the square wave approaches, multiply by
    # this value to get it to approach 0.5 instead (then we add 0.5 to every
    # sample to get the wave from 0 - 1.0)
    amplitude = 0.5 / 0.7853

    # center index
    half = width // 2
    
    # sample the step
    for i in range(width):
        angle = ((i - half + 1) + 0.5 + phase) * (1 / samplingRate)
        # add 0.5 so that the wave goes from 0 to 1 instead of -0.5 to 0.5
        sample = 0.5

        # add the sines of every odd harmonic
        for h in range(1, harmonics, 2):
            # reduce gibbs phenomenon using sigma approximation
            lanczos = sinc(h / harmonics)
            sample += lanczos * amplitude * (math.sin(h * 2 * math.pi * angle * frequency) / h)
        
        sset.append(sample)

    # convert to a delta wave
    # we know that prev is 0.0 from the way we setup the square wave
    prev = 0.0
    error = 1.0
    for i in range(width):
        cur = sset[i]
        delta = cur - prev
        prev = cur
        sset[i] = delta
        error -= delta

    # adjust so that the sum of the set == 1.0
    halferror = error * 0.5
    sset[half] += halferror
    sset[half - 1] += halferror

    return sset


def sincsetToArray(sset):
    return "{{ {} }}".format(", ".join(
        ["{: 1.9f}f".format(ctypes.c_float(s).value) for s in sset]
    ))


def main(samplingRate, frequency, phases, width):
    sets = []

    for i in range(phases):
        p = -i / phases
        sset = stepset(samplingRate, frequency, p, width)
        sets.append("    /* Phase: {: 0.3f} */    ".format(p) + sincsetToArray(sset))

    print("{")
    print("    // this table was generated by genstep.py")
    print("    // genstep.py", " ".join(sys.argv[1:]))
    print(",\n".join(sets))
    print("};")


if __name__ == "__main__":

    if len(sys.argv) != 5:
        print("usage: gensinc.py <samplingRate> <frequency> <phases> <stepwidth>")
        sys.exit(1)
    
    samplingRate = float(sys.argv[1])
    frequency = float(sys.argv[2])
    phases = int(sys.argv[3])
    stepwidth = int(sys.argv[4])

    main(samplingRate, frequency, phases, stepwidth)
